#include <iostream>
#include <vector>
#include <ctime>
#include <SDL.h>
#include <SDL_image.h>
#include <math.h>

using namespace std;

// Diem cua nguoi choi
int score = 0;

// Cac hang so
const int r = 10;
const int p = 2 * r;
const int step = 20;
const int width = 800;
const int height = 600;
//
bool test=true;
// Khai bao SDL
SDL_Window* window = NULL;
SDL_Renderer* renderer = NULL;

// Background
const char* image = "background.png";
SDL_Texture* backgroundTexture = NULL;

// Toa do ran, qua bong
struct Circle {
    int x, y;
};

// Dot cua con ran
vector<Circle> snake;

// Qua bong nho
Circle ball;

// Qua bong lon
Circle bigBall;

// Ve hinh tron
void drawCircle(int x, int y, int radius) {
    for (int i = 0; i <= radius * 2; ++i) {
        for (int j = 0; j <= radius * 2; ++j) {
            int dx = radius - i;
            int dy = radius - j;
            if (dx * dx + dy * dy <= radius * radius) {
                SDL_RenderDrawPoint(renderer, x + dx, y + dy);
            }
        }
    }
}

// Ve lai sau moi thao tac
void draw(int x, int y) {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    // Ve background
    SDL_RenderCopy(renderer, backgroundTexture, NULL, NULL);

    // Ve ran
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    for (int i = 1; i < snake.size(); ++i) {
        drawCircle(snake[i].x, snake[i].y, r);
    }

    // Ve qua bong nho
    drawCircle(ball.x, ball.y, r);

    // Ve qua bong lon
    if (bigBall.x != 0 && bigBall.y != 0&&test) {
        SDL_SetRenderDrawColor(renderer, 255, 255, 0, 255);
        drawCircle(bigBall.x, bigBall.y, p);
    }

    // Ve dau ran
    SDL_SetRenderDrawColor(renderer, 100, 100, 100, 255);
    drawCircle(x, y, r);

    SDL_RenderPresent(renderer);
}

// Random vi tri qua bong
void placeBall() {
    srand(time(0));
    ball.x = rand() % (width - 2 * r) + r;
    ball.y = rand() % (height - 2 * r) + r;

    for (Circle c : snake) {
        if ((ball.x >= c.x - r && ball.x <= c.x + r) && (ball.y >= c.y - r && ball.y <= c.y + r)) {
            placeBall();
            break;
        }
    }
}

// Random qua bong lon
Circle randomBigBall() {
    Circle bigball;
    srand(time(0));
    bigball.x = rand() % (width - 2 * p) + p;
    bigball.y = rand() % (height - 2 * p) + p;

    bool check = true;
    for (Circle c : snake) {
        if ((bigball.x >= c.x - r && bigball.x <= c.x + r) && (bigball.y >= c.y - r && bigball.y <= c.y + r)) {
            return randomBigBall();
        }
    }

    return bigball;
}

// Kiem tra ran dam vao tuong
bool testWallCollision() {
    int m = snake[0].x;
    int n = snake[0].y;
    return (m >= r && m <= width - r && n >= r && n <= height - r);
}

// Kiem tra ran cham vao than no
bool testSelfCollision() {
    for (int i = 1; i < snake.size(); ++i) {
        if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) {
            return false;
        }
    }
    return true;
}

int main(int argc, char* argv[]) {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        cout << "Khong mo duoc SDL: " << SDL_GetError() << endl;
        return 1;
    }

    window = SDL_CreateWindow("Ran san moi", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width, height, SDL_WINDOW_SHOWN);
    if (window == NULL) {
        cout << "Khong mo duoc cua so: " << SDL_GetError() << endl;
        SDL_Quit();
        return 1;
    }

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (renderer == NULL) {
        cout << "Khong tao duoc but ve: " << SDL_GetError() << endl;
        SDL_DestroyWindow(window);
        SDL_Quit();
        return 1;
    }

    // Load background
    SDL_Surface* surface = IMG_Load(image);
    if (surface == NULL) {
        cout << "Khong mo duoc background: " << SDL_GetError() << endl;
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        SDL_Quit();
        return 1;
    }
    backgroundTexture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_FreeSurface(surface);

    // Ve background len cua so
    SDL_RenderClear(renderer);
    SDL_RenderCopy(renderer, backgroundTexture, NULL, NULL);
    SDL_RenderPresent(renderer);

    // Mo dau tro choi voi 1 con ran 3 khuc
    Circle head = { 50, height / 2 };
    snake.push_back(head);
    snake.push_back({ 30, height / 2 });
    snake.push_back({ 10, height / 2 });

    // Random vi tri qua bong
    placeBall();

    // Ve con ran ban dau
    draw(head.x, head.y);

    // Vong lap thoat game
    SDL_Event e;
    bool quit = false;
    bool validDirection = true;
    char direction = 'r'; //right

    // Bien dem de kiem tra an bong va xu ly bong lon
    int count = 0;
    // bien dem thoi gian
    int tm=0;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            }
            else if (e.type == SDL_KEYDOWN) {
                switch (e.key.keysym.sym) {
                case SDLK_LEFT:
                    if (direction != 'r') direction = 'l';
                    break;
                case SDLK_RIGHT:
                    if (direction != 'l') direction = 'r';
                    break;
                case SDLK_UP:
                    if (direction != 'd') direction = 'u';
                    break;
                case SDLK_DOWN:
                    if (direction != 'u') direction = 'd';
                    break;
                }
            }
        }
        int scoreO=score;
        bool wallCollision = testWallCollision();
        bool selfCollision = testSelfCollision();
        if (!validDirection || !wallCollision || !selfCollision) {
            cout << "Game over!\n";
            break;
        }

        if (snake.front().x >= ball.x - 15 && snake.front().x <= ball.x + 15 &&
            snake.front().y >= ball.y - 15 && snake.front().y <= ball.y + 15) {
            score += 5;
            snake.push_back(snake.back());
            placeBall();
            count++;
        }

        if (count >= 5) {
                test=true;
            bigBall = randomBigBall();
            count = 0;
        }
        tm++;
        if(tm>50)
        {
            test=false;
            tm=0;
        }

        if (snake.front().x >= bigBall.x - p - 5 && snake.front().x <= bigBall.x + p - 5 &&
            snake.front().y >= bigBall.y - p - 5 && snake.front().y <= bigBall.y + p - 5) {
            if (tm <= 10) score += 50;
            else if (tm <= 20) score += 30;
            else if (tm <= 35) score += 20;
            else score += 10;
            count = 0;
            bigBall.x = 0;
            bigBall.y = 0;
            test=false;
        }

        int stepX = 0, stepY = 0;
        switch (direction) {
            case 'r':
                stepX = step;
                break;
            case 'l':
                stepX = -step;
                break;
            case 'u':
                stepY = -step;
                break;
            case 'd':
                stepY = step;
                break;
        }

        for (int i = snake.size() - 1; i >= 1; i--) {
            snake[i].x = snake[i - 1].x;
            snake[i].y = snake[i - 1].y;
        }

        snake[0].x += stepX;
        snake[0].y += stepY;

        draw(snake[0].x, snake[0].y);
        SDL_Delay(150);
        if(scoreO!=score) cout<<score<<endl;
    }

    SDL_DestroyTexture(backgroundTexture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}